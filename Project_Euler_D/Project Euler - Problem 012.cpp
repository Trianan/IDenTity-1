// Project Euler - Problem 012.cpp : This file contains the 'main' function. Program execution begins and ends there.
//
// "Highly Divisible Triangular Number"
// 
// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 
// 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//
//                                               1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers :
//
//        1 : 1
//        3 : 1, 3
//        6 : 1, 2, 3, 6
//        10 : 1, 2, 5, 10
//        15 : 1, 3, 5, 15
//        21 : 1, 3, 7, 21
//        28 : 1, 2, 4, 7, 14, 28
//
// We can see that 28 is the first triangle number to have over five divisors.
//
// What is the value of the first triangle number to have over five hundred divisors ?

#include <iostream>
#include <cmath>

using namespace std;

int triangle_number(int x)
{
    int sum = 0;

    for (int i = 0; i <= x;)
    {
        sum = sum + i;

        i++;
    }

    return(sum);
}

int factor_counter(int x)
{
    int sum = 0;

    for (int i = 1; i <= sqrt(x);)
    {
        if (!(x % i))
        {
            sum = sum + 2;
        }

        if (i == sqrt(x))
        {
            sum = sum - 1;
        }

        i++;
    }

    return(sum);
}

int main()
{
    int i = 1;

    while (factor_counter(triangle_number(i)) <= 500)
    {
        i++;
    }
    cout << triangle_number(i);
}