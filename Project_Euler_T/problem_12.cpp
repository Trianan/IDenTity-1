
/*  <------ -= ======------ -= ======------ -= ======------ -= ======>  P R O J E C T  E U L E R  <=======------ -= ======------ -= ======------ -= ======------->

	PROBLEM #12: "Let The Triforce Be With You" - Trianan - Dec 12/2021
    
           "The sequence of triangle numbers is generated by adding the natural numbers. 
            So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
            The first ten terms would be:

            1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
            Let us list the factors of the first seven triangle numbers:

            1: 1
            3: 1,3
            6: 1,2,3,6
            10: 1,2,5,10
            15: 1,3,5,15
            21: 1,3,7,21
            28: 1,2,4,7,14,28

            We can see that 28 is the first triangle number to have over five divisors.
            What is the value of the first triangle number to have over five hundred divisors?"

	< ------ -= ======------ -= ======------ -= ======------ -= ======-------> N O T E S <------ -= ======------ -= ======------ -= ======------ -= ======------->

            - Triangle sequence generation works well; need to filter out redundant searches as it will take too long to find
              the answer using just this method alone, though it theoretically could find it.* (Dec 12/2021)

                    *So it turns out first_number() returns zero because 500! cannot be stored in any standard C++ integer type.
                     Therefore I'll need to either use an external class to represent it, or write one myself, which is what I am
                     obviously gonna do. (Dec 17/2021)

            - Lowest number definitely isn't 500! according to Damon, which makes sense and would have been an easier conclusion to
              reach if beer and weed didn't have anything to do with it. (Dec 18/2021)


	*/

#include <iostream>
#include <iomanip>
#include <sstream>
#include <string>
#include <vector>

using namespace std;

using integer = long long; // Allows increasing size of integers used.
integer integer_max = 9223372036854775807;
const integer divisor_floor = 500;

//  < ------ -= ======------ -= ======------ -= ======------ -= ======------ -= ======------ -= ======------ -= ======------ -= ======------->

integer first_number(integer df) {
    //.
    integer n = 1;
    for (integer i = 1; i <= df; ++i)
        n *= i;
    return n;
}

bool n_has_kdivisors(integer n, integer d) {
    vector<integer> factors;

    if (n == 0) {
        cout << "Zero is divisible by every integer.\n\n";
        return false;
    }

    integer factor_ceiling = n;
    for (integer i = 1; i < factor_ceiling; ++i)
        if (n % i == 0) {
            factors.push_back(i);
            factors.push_back(n / i);
            factor_ceiling = n / i;
        }

    if (factors.size() >= d) {
        cout << n << " HAS " << factors.size() << " DIVISORS.\n\n";
        return true;
    }
    else
        return false;
}

void triangle_sequence(bool (*exit_condition)(integer, integer), integer exit_value, integer max_n = integer_max) {
    /* 
        Generates the sequence of triangle numbers until either a specified exit function returns true, or
        the maximum value representable is reached for an optionally specified size of integer.
    */
    integer tri_n = first_number(divisor_floor);
    cout << "Starting search at: " << tri_n << '\n';
    integer i = 0;
    while (tri_n < max_n && exit_condition(tri_n, exit_value) == false) {
        //tri_seq.push_back(tri_n);
        //cout << tri_n << 'n';
        ++i;
        tri_n += i;
    }
    return;
}

//  < ------ -= ======------ -= ======------ -= ======------ -= ======------ -= ======------ -= ======------ -= ======------ -= ======------->
int main() {
    
    triangle_sequence(n_has_kdivisors, divisor_floor);

    return 0;
}